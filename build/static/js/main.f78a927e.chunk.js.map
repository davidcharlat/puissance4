{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","onClickun","value","Board","i","j","newvalue","this","columns","renderSquare","React","Component","Game","state","stepNumber","history","squares","Array","fill","columnplayed","xIsNext","length","slice","calculateWinner","columnset","cell","setState","concat","step","status","current","moves","map","move","sentence","sentenceplayer","key","jumpTo","winner","handleClick","id","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f78a927e.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n    return (\n        <button className=\"square\" onClick={props.onClickun}>\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n    /*  constructor(props) {\n          super(props);\n          this.state = {\n              columns: Array(42).fill(null),//Array(7).fill(Array(6).fill(null)),\n              xIsNext: true,\n          };\n      }*/\n    renderSquare(i, j) {\n        let newvalue = this.props.columns[6 * i + j];\n        return (<Square\n            value={newvalue} //{this.state.columns[i][j]}\n            onClickun={() => this.props.onClickun(i, j)}\n        />\n        );\n    }\n    render() {\n        return (\n            <div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0, 5)}\n                    {this.renderSquare(1, 5)}\n                    {this.renderSquare(2, 5)}\n                    {this.renderSquare(3, 5)}\n                    {this.renderSquare(4, 5)}\n                    {this.renderSquare(5, 5)}\n                    {this.renderSquare(6, 5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0, 4)}\n                    {this.renderSquare(1, 4)}\n                    {this.renderSquare(2, 4)}\n                    {this.renderSquare(3, 4)}\n                    {this.renderSquare(4, 4)}\n                    {this.renderSquare(5, 4)}\n                    {this.renderSquare(6, 4)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0, 3)}\n                    {this.renderSquare(1, 3)}\n                    {this.renderSquare(2, 3)}\n                    {this.renderSquare(3, 3)}\n                    {this.renderSquare(4, 3)}\n                    {this.renderSquare(5, 3)}\n                    {this.renderSquare(6, 3)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0, 2)}\n                    {this.renderSquare(1, 2)}\n                    {this.renderSquare(2, 2)}\n                    {this.renderSquare(3, 2)}\n                    {this.renderSquare(4, 2)}\n                    {this.renderSquare(5, 2)}\n                    {this.renderSquare(6, 2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0, 1)}\n                    {this.renderSquare(1, 1)}\n                    {this.renderSquare(2, 1)}\n                    {this.renderSquare(3, 1)}\n                    {this.renderSquare(4, 1)}\n                    {this.renderSquare(5, 1)}\n                    {this.renderSquare(6, 1)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0, 0)}\n                    {this.renderSquare(1, 0)}\n                    {this.renderSquare(2, 0)}\n                    {this.renderSquare(3, 0)}\n                    {this.renderSquare(4, 0)}\n                    {this.renderSquare(5, 0)}\n                    {this.renderSquare(6, 0)}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            stepNumber: 0,\n            history: [{\n                squares: Array(42).fill(null),\n                columnplayed: null,\n            }],\n            xIsNext: true,\n        };\n    }\n    handleClick(i, j) {\n        const history = this.state.history;\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares)) { return; }\n        let columnset = squares.slice();\n        if (columnset[6 * i + 5]) { return; }\n        let cell = 0;\n        while (columnset[i * 6 + cell]) { cell = cell + 1 }\n        columnset[i * 6 + cell] = (this.state.xIsNext ? \"X\" : \"O\");\n        this.setState({\n            history: history.concat([{\n                squares: columnset,\n                columnplayed: i + 1,\n            }]),\n            xIsNext: !this.state.xIsNext,\n        })\n    }\n    jumpTo(step) {\n        this.setState({\n            history: this.state.history.slice(0, step),\n            xIsNext: ((step % 2) === 1),\n            stepNumber: step,\n        })\n    }\n    render() {\n        const history = this.state.history;\n        const current = history[history.length - 1];\n\n        const moves = history.map((step, move) => {\n            let sentence = move > 1 ? 'go back to step nÂ°' + (move - 1) : 'go back to begining';\n            if (move) {\n                let sentenceplayer = null;\n                if (move > 1) {\n                    sentenceplayer = move % 2 === 0 ? ' ( X in column ' : '( O in column ';\n                    sentenceplayer = sentenceplayer + history[move - 1].columnplayed + ' )'\n                }\n                return (\n                    <li key={move}>\n                        <button onClick={() => this.jumpTo(move)}>{sentence} {sentenceplayer}</button>\n                    </li>\n                );\n            }\n            else { return null };\n        });\n\n        let winner = calculateWinner(current.squares)\n        let status;\n        if (winner) {\n            status = \"the winner is: \" + winner;\n        }\n        else {\n            status = (this.state.xIsNext ? 'Next player: X' : 'Next player: O');\n            if (history.length === 43) {\n                status = 'drawn';\n            }\n        }\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board\n                        columns={current.squares}\n                        onClickun={(i, j) => this.handleClick(i, j)} />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <div id=\"scroll\">\n                        <ol id=\"moves\">{moves}</ol>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction calculateWinner(columns) {\n    for (let i = 0; i < columns.length; i++) {\n        if (i % 6 < 4) {\n            if (columns[i] && columns[i] === columns[i + 1] && columns[i] === columns[i + 2]\n                && columns[i] === columns[i + 3]) { return columns[i] }\n            if (i / 6 < 4) {\n                if (columns[i] && columns[i] === columns[i + 6] && columns[i] === columns[i + 12]\n                    && columns[i] === columns[i + 18]) { return columns[i] }\n                if (columns[i] && columns[i] === columns[i + 7] && columns[i] === columns[i + 14]\n                    && columns[i] === columns[i + 21]) { return columns[i] }\n            }\n        }\n        if (i % 6 > 2) {\n            if (i / 6 < 4) {\n                if (columns[i] && columns[i] === columns[i + 5] && columns[i] === columns[i + 10]\n                    && columns[i] === columns[i + 15]) { return columns[i] }\n            }\n        }\n        if (i / 6 < 4) {\n            if (columns[i] && columns[i] === columns[i + 6] && columns[i] === columns[i + 12]\n                && columns[i] === columns[i + 18]) { return columns[i] }\n        }\n    }\n    return null;\n}\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}